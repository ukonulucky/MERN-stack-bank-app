const express = require("express")
const allUserSchema = require("../dB/dBSchema")

const router = express.Router()

const handleErorrs = (err) => {
  const generatedError = {

  }
  if (err.code) {
    generatedError["phoneNumber"] = "phoneNumber must be unique"
    console.log(generatedError)
    return generatedError
  }
  

  if (err.message.includes("allUser validation failed")) {
    console.log(err.errors)
    Object.values(err.errors).map(i => {
      console.log(i.properties)
    //  generatedError[i.properties.path] = i.properties.message
    })
    return generatedError
  }

}


// creating user routes

// register route


router.post("/register", async (req, res) => {
  try {
    
        const { phoneNumber, email, address, fullName, password } = req.body
      if (phoneNumber && email && address && fullName && password) {
      
            const newUser = new allUserSchema({
                phoneNumber, email, password, fullName, address
            })
            await newUser.save()
            console.log(newUser)
            
            res.status(200).json(newUser)
     }
  } catch (error) {
    const newErrors = handleErorrs(error)
    console.log(newErrors)
    res.status(400).json({newErrors})
   }
}) 

router.post("/login", async (req, res) => {
    try {
        const { phoneNumber, password} = req.body
      const findUser = await allUserSchema.find({
        phoneNumber, password
      })
        if (findUser.length > 0) {
            console.log(findUser)
        res.status(201).json(findUser)
        } else {
            res.status(404).json(findUser) 
      }
    } catch (error) {
        console.log(error.message)
     res.json(error.message).statusCode(401)
  }
})

module.exports = router